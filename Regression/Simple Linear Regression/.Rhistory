print("Hello World!")
demo()
demo()
demo(base=.base(all.variables = TRUE))
demo(base = .base(all.variables = TRUE))
demo(base = .error.catching(all.variables = TRUE))
demo(error.catching = .error.catching(all.variables = TRUE))
demo(base = .packages(all.variables = TRUE))
demo(base = .packages(all.variables = TRUE))
demo(package = .packages(all.variables = TRUE))
demo(package = .packages(all.available = TRUE))
q()
update.packages
installed.packages()
install.package('caTools')
install.packages('caTools')
q()
dataset = read.csv('Data.csv')
setwd("~/Desktop/test_SLR")
dataset = read.csv('Data.csv')
View(dataset)
View(dataset)
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$percentage, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
#fitting the SLR on the training set
regressor = lm(formula = percentage ~ hours_of_self_study, data = training_set)
#predict the percentage based on the hours
y_pred = predict(regressor, test_set)
y_pred
View(test_set)
View(test_set)
split
View(training_set)
View(test_set)
library(ggplot2)
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$hours_of_self_study, y= training_set$percentage),
colour='red') +
geom_line(aes(x=training_set$hours_of_self_study, y=predict(regressor, training_set)),
coolour = 'blue')+
ggtitle('Hours_of_selfStudy vs Percentage (Training Set)')+
xlab('Hours_of_SelfStudy')+
ylab('Percentage')
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$hours_of_self_study, y= training_set$percentage),
colour='red') +
geom_line(aes(x=training_set$hours_of_self_study, y=predict(regressor, training_set)),
colour = 'blue')+
ggtitle('Hours_of_selfStudy vs Percentage (Training Set)')+
xlab('Hours_of_SelfStudy')+
ylab('Percentage')
ggplot() +
geom_point(aes(x=test_set$hours_of_self_study, y= test_set$percentage),
colour='red') +
geom_line(aes(x=training_set$hours_of_self_study, y=predict(regressor, training_set)),
colour = 'blue')+
ggtitle('Hours_of_selfStudy vs Percentage (Training Set)')+
xlab('Hours_of_SelfStudy')+
ylab('Percentage')
View(test_set)
View(dataset)
dataset = read.csv('Data.csv')
# Importing the dataset
dataset = read.csv('Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$percentage, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#fitting the SLR on the training set
regressor = lm(formula = percentage ~ hours_of_self_study, data = training_set)
#predict the percentage based on the hours
y_pred = predict(regressor, test_set)
#Visualising the training set results
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$hours_of_self_study, y= training_set$percentage),
colour='red') +
geom_line(aes(x=training_set$hours_of_self_study, y=predict(regressor, training_set)),
colour = 'blue')+
ggtitle('Hours_of_selfStudy vs Percentage (Training Set)')+
xlab('Hours_of_SelfStudy')+
ylab('Percentage')
ggplot() +
geom_point(aes(x=test_set$hours_of_self_study, y= test_set$percentage),
colour='red') +
geom_line(aes(x=training_set$hours_of_self_study, y=predict(regressor, training_set)),
colour = 'blue')+
ggtitle('Hours_of_selfStudy vs Percentage (Training Set)')+
xlab('Hours_of_SelfStudy')+
ylab('Percentage')
y_pred
dataset$Age = ifelse(is.na(dataset$percentage),
ave(dataset$percentage, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$percentage)
# Importing the dataset
dataset = read.csv('Data.csv')
# #taking care of missing values in Age and Salary Columns
dataset$Age = ifelse(is.na(dataset$percentage),
ave(dataset$percentage, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$percentage)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$percentage, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#fitting the SLR on the training set
regressor = lm(formula = percentage ~ hours_of_self_study, data = training_set)
#predict the percentage based on the hours
y_pred = predict(regressor, test_set)
#Visualising the training set results
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$hours_of_self_study, y= training_set$percentage),
colour='red') +
geom_line(aes(x=training_set$hours_of_self_study, y=predict(regressor, training_set)),
colour = 'blue')+
ggtitle('Hours_of_selfStudy vs Percentage (Training Set)')+
xlab('Hours_of_SelfStudy')+
ylab('Percentage')
ggplot() +
geom_point(aes(x=test_set$hours_of_self_study, y= test_set$percentage),
colour='red') +
geom_line(aes(x=training_set$hours_of_self_study, y=predict(regressor, training_set)),
colour = 'blue')+
ggtitle('Hours_of_selfStudy vs Percentage (Training Set)')+
xlab('Hours_of_SelfStudy')+
ylab('Percentage')
dataset$percentage = ifelse(is.na(dataset$percentage),
ave(dataset$percentage, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$percentage)
dataset$percentage = ifelse(is.na(dataset$percentage),
ave(dataset$percentage, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$percentage)
# Importing the dataset
dataset = read.csv('Data.csv')
# #taking care of missing values in Age and Salary Columns
dataset$percentage = ifelse(is.na(dataset$percentage),
ave(dataset$percentage, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$percentage)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$percentage, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#fitting the SLR on the training set
regressor = lm(formula = percentage ~ hours_of_self_study, data = training_set)
#predict the percentage based on the hours
y_pred = predict(regressor, test_set)
#Visualising the training set results
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$hours_of_self_study, y= training_set$percentage),
colour='red') +
geom_line(aes(x=training_set$hours_of_self_study, y=predict(regressor, training_set)),
colour = 'blue')+
ggtitle('Hours_of_selfStudy vs Percentage (Training Set)')+
xlab('Hours_of_SelfStudy')+
ylab('Percentage')
ggplot() +
geom_point(aes(x=test_set$hours_of_self_study, y= test_set$percentage),
colour='red') +
geom_line(aes(x=training_set$hours_of_self_study, y=predict(regressor, training_set)),
colour = 'blue')+
ggtitle('Hours_of_selfStudy vs Percentage (Training Set)')+
xlab('Hours_of_SelfStudy')+
ylab('Percentage')
dataset$percentage = ifelse(is.na(dataset$percentage),
ave(dataset$percentage, FUN = function(x) median(x, na.rm = TRUE)),
dataset$percentage)
# Importing the dataset
dataset = read.csv('Data.csv')
# #taking care of missing values in Age and Salary Columns
dataset$percentage = ifelse(is.na(dataset$percentage),
ave(dataset$percentage, FUN = function(x) median(x, na.rm = TRUE)),
dataset$percentage)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$percentage, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#fitting the SLR on the training set
regressor = lm(formula = percentage ~ hours_of_self_study, data = training_set)
#predict the percentage based on the hours
y_pred = predict(regressor, test_set)
#Visualising the training set results
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$hours_of_self_study, y= training_set$percentage),
colour='red') +
geom_line(aes(x=training_set$hours_of_self_study, y=predict(regressor, training_set)),
colour = 'blue')+
ggtitle('Hours_of_selfStudy vs Percentage (Training Set)')+
xlab('Hours_of_SelfStudy')+
ylab('Percentage')
ggplot() +
geom_point(aes(x=test_set$hours_of_self_study, y= test_set$percentage),
colour='red') +
geom_line(aes(x=training_set$hours_of_self_study, y=predict(regressor, training_set)),
colour = 'blue')+
ggtitle('Hours_of_selfStudy vs Percentage (Training Set)')+
xlab('Hours_of_SelfStudy')+
ylab('Percentage')
y_pred
View(dataset)
# Importing the dataset
dataset = read.csv('Data.csv')
dataset$percentage = ifelse(is.na(dataset$percentage),
ave(dataset$percentage, FUN = function(x) median(x, na.rm = TRUE)),
dataset$percentage)
dataset = read.csv('Data.csv')
dataset$percentage = ifelse(is.na(dataset$percentage),
ave(dataset$percentage, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$percentage)
dataset$hours_of_self_study = ifelse(is.na(dataset$hours_of_self_study),
ave(dataset$hours_of_self_study, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$hours_of_self_study)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$percentage, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#fitting the SLR on the training set
regressor = lm(formula = percentage ~ hours_of_self_study, data = training_set)
#fitting the SLR on the training set
regressor = lm(formula = percentage ~ hours_of_self_study, data = training_set)
regressor
#predict the percentage based on the hours
y_pred = predict(regressor, test_set)
y_pred
View(test_set)
View(training_set)
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$hours_of_self_study, y= training_set$percentage),
colour='red') +
geom_line(aes(x=training_set$hours_of_self_study, y=predict(regressor, training_set)),
colour = 'blue')+
ggtitle('Hours_of_selfStudy vs Percentage (Training Set)')+
xlab('Hours_of_SelfStudy')+
ylab('Percentage')
setwd("~/Desktop/Machine-Learning-AZ/Part 2 - Regression/Section 4 - Simple Linear Regression")
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
#fitting the Simple Linear Regression on the training set
regressor = lm(formula = Salary ~ YearsExperience, data = training_set)
#predicting the test set values
y_pred = predict(regressor, test_set)
#Visualising the training set results
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$YearsExperience, y= training_set$Salary),
colour='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor, training_set)),
coolour = 'blue')+
ggtitle('Salary vs Experience (Training Set)')+
xlab('Years of Experience')+
ylab('Salary')
#Visualising the Test set results
ggplot() +
geom_point(aes(x=test_set$YearsExperience, y= test_set$Salary),
colour='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor, training_set)),
coolour = 'blue')+
ggtitle('Salary vs Experience (Test set)')+
xlab('Years of Experience')+
ylab('Salary')
